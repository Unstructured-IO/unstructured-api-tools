import os
from pathlib import Path
from typing import List, Optional
import unstructured_api_tools.pipelines.lint as lint
from unstructured_api_tools.pipelines.api_conventions import get_pipeline_path
from unstructured_api_tools.pipelines.convert import get_api_name, read_notebook, notebook_to_script, \
    _infer_params_from_pipeline_api, get_script_filename, _organize_imports
from jinja2 import Environment, FileSystemLoader

PATH = Path(__file__).resolve().parent
TEMPLATE_PATH = os.path.join(PATH, "templates")

ENVIRONMENT = Environment(loader=FileSystemLoader(TEMPLATE_PATH))
TEST_TEMPLATE = "test_template.txt"
TEST_PIPELINE_API_TEXT = "test_pipeline_api_text.txt"
TEST_PIPELINE_API_TEXT_M_INPUT1 = "test_pipeline_api_text_m_input1.txt"
TEST_PIPELINE_API_TEXT_M_INPUT2 = "test_pipeline_api_text_m_input2.txt"


def generate_tests_from_notebooks(
        notebook_filenames: List[str],
        input_directory: str,
        output_directory: str,
        pipeline_family: Optional[str] = None,
        semver: Optional[str] = None,
        config_filename: Optional[str] = None,
        flake8_opts: List[str] = lint.FLAKE8_DEFAULT_OPTS
):
    fastapi_app_import_route = convert_path_to_import(output_directory)
    app_import = f"from {fastapi_app_import_route}.app import app"
    for notebook_filename in notebook_filenames:
        test_directory = os.path.join(output_directory, "pipeline-test", get_api_name(notebook_filename))
        os.makedirs(test_directory)
        notebook = read_notebook(os.path.join(input_directory, notebook_filename))
        notebook_script = notebook_to_script(notebook)
        pipeline_path = get_pipeline_path(
            filename=get_script_filename(notebook_filename),
            pipeline_family=pipeline_family,
            semver=semver,
            config_filename=config_filename,
        )
        endpoint_params = _infer_params_from_pipeline_api(notebook_script)
        endpoint_tests = build_tests_per_endpoint(endpoint_params=endpoint_params, pipeline_path=pipeline_path)
        build_test_file(test_directory=test_directory, app_import=app_import, endpoint_tests=endpoint_tests, flake8_opts=flake8_opts)


def convert_path_to_import(path: str) -> str:
    new_path = path.replace("/", ".")
    while new_path.startswith(".") and len(new_path) > 1:
        new_path = new_path[1:len(new_path)]
    while new_path.endswith(".") and len(new_path) > 1:
        new_path = new_path[0:len(new_path) - 1]
    return new_path


def build_test_file(
        test_directory: str,
        app_import: str,
        endpoint_tests: str,
        flake8_opts: List[str] = lint.FLAKE8_DEFAULT_OPTS
):
    template = ENVIRONMENT.get_template(TEST_TEMPLATE)
    content = template.render(app_import=app_import, endpoint_tests=endpoint_tests)
    script_filename = os.path.join(test_directory, "test_pipeline_api.py")
    init_filepath = os.path.join(test_directory, "__init__.py")

    content = _organize_imports(content)
    content = (
            """
#####################################################################
# THIS FILE IS AUTOMATICALLY GENERATED BY UNSTRUCTURED API TOOLS.
# DO NOT MODIFY DIRECTLY
#####################################################################


import os
os.environ["PIPELINE_API_RATE_LIMIT"] = "1000/second"

"""
            + content
    )
    content = lint.format_black(content)
    lint.check_flake8(content, opts=flake8_opts)
    lint.check_mypy(content)
    with open(script_filename, "w") as f:
        f.write(content)
    with open(init_filepath, "w") as _:
        pass


def build_tests_per_endpoint(
        endpoint_params,
        pipeline_path: str
) -> str:
    test_content = ""

    if endpoint_params.get("accepts_text", False):
        test_content += build_text_tests(pipeline_path) + "\n"
    # if "section" and "section_regex" in endpoint_params.get("multi_string_param_names", []):
    #     test_content += build_text_m_input1_n_input2_tests(pipeline_path) + "\n"
    if "section" in endpoint_params.get("multi_string_param_names", []):
        test_content += build_text_m_input1_tests(pipeline_path) + "\n"
    # if "section_regex" in endpoint_params.get("multi_string_param_names", []):
    #     test_content += build_text_m_input2_tests(pipeline_path) + "\n"

    return test_content


def build_text_tests(
        pipeline_path: str,
) -> str:
    template = ENVIRONMENT.get_template(TEST_PIPELINE_API_TEXT)
    content = template.render(url=pipeline_path)
    return content


def build_text_m_input1_tests(
    pipeline_path: str,
) -> str:
    template = ENVIRONMENT.get_template(TEST_PIPELINE_API_TEXT_M_INPUT1)
    content = template.render(url=pipeline_path)
    return content


def build_text_m_input2_tests(
    pipeline_path: str
) -> str:
    template = ENVIRONMENT.get_template(TEST_PIPELINE_API_TEXT_M_INPUT2)
    content = template.render(url=pipeline_path)
    return content


def build_text_m_input1_m_input2_tests(
    pipeline_path: str
) -> str:
    template_1 = ENVIRONMENT.get_template(TEST_PIPELINE_API_TEXT_M_INPUT1)
    template_2 = ENVIRONMENT.get_template(TEST_PIPELINE_API_TEXT_M_INPUT2)
    content_1 = template_1.render(url=pipeline_path)
    content_2 = template_2.render(url=pipeline_path)
    return content_1 + "\n" + content_2

